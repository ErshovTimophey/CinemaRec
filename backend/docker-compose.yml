services:
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: tim
      POSTGRES_PASSWORD: tim
      POSTGRES_DB: auth_db
      PGDATA: /var/lib/postgresql/data/inf
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/data/postgres/inf
    networks:
      - app_network
    restart: unless-stopped

  frontend:
    image: frontend:latest
    container_name: frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Стандартный порт для React/Next.js
    depends_on:
      - auth-service
    networks:
      - app_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - app_network
    volumes:
      - pgadmin:/var/lib/pgadmin/inf
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis
    #command: redis-server --bind 0.0.0.0
    ports:
      - "6379:6379"
      - "6380:6380"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped

  localstack:
    image: localstack/localstack:3.8.1
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,server
      - DEFAULT_REGION=us-east-1
      - LOCALSTACK_HOST=localhost
      - DEBUG=1
      - START_WEB=1
    volumes:
      - localstack_data:/var/lib/localstack
      - ./localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
    networks:
      - app_network

  review-service:
    image: review-service:latest
    container_name: review-service
    build:
      context: ./review-service
      dockerfile: Dockerfile
    environment:
      - SERVER_PORT=8085
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8086
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - image-storage-service
    networks:
      - app_network
    restart: unless-stopped

  image-storage-service:
    image: image-storage-service:latest
    container_name: image-storage-service
    build:
      context: ./image-storage-service
      dockerfile: Dockerfile
    environment:
      - SERVER_PORT=8086
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET=cinemarec-images
      - AWS_S3_ENDPOINT=http://localstack:4566
    ports:
      - "8086:8086"
    depends_on:
      - localstack
    networks:
      - app_network
    restart: unless-stopped

  recommendation-service:
    image: recommendation-service:latest
    container_name: recommendation-service
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=recommendation-group
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - LOGGING_LEVEL_ORG_APACHE_KAFKA=INFO
      - REDIS_URL=redis://redis:6379
      - TMDB_API_KEY=Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZDQ2MmI5MTYxZGM3NDIwMzI0NWVjMDcyOWRmZjM4NyIsIm5iZiI6MTc0NzA2MzAxOC41MzUsInN1YiI6IjY4MjIxMGVhMzJmNzNlMTJlNDczOTNjNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Xx1dOcNyzFsIMIB3h3hD006NVEoZMFXsF6d7GVlUsTA
      - TMDB_API_BASE_URL=https://api.themoviedb.org/3
      - TMDB_API_IMAGE_BASE_URL=https://image.tmdb.org/t/p/w500
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - app_network
    restart: unless-stopped


  user-service:
    image: user-service:latest
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=recommendation-group
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - LOGGING_LEVEL_ORG_APACHE_KAFKA=INFO
      - FEIGN_CLIENT_CONFIG_RECOMMENDATION_SERVICE_URL=http://recommendation-service:8083
      - REDIS_URL=redis://redis:6379
      - TMDB_API_KEY=Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZDQ2MmI5MTYxZGM3NDIwMzI0NWVjMDcyOWRmZjM4NyIsIm5iZiI6MTc0NzA2MzAxOC41MzUsInN1YiI6IjY4MjIxMGVhMzJmNzNlMTJlNDczOTNjNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Xx1dOcNyzFsIMIB3h3hD006NVEoZMFXsF6d7GVlUsTA
      - TMDB_API_BASE_URL=https://api.themoviedb.org/3
      - TMDB_API_IMAGE_BASE_URL=https://image.tmdb.org/t/p/w500
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - app_network
    restart: unless-stopped

  statistics-service:
    image: statistics-service:latest
    container_name: statistics-service
    build:
      context: ./statistics-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=recommendation-group
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - LOGGING_LEVEL_ORG_APACHE_KAFKA=INFO
      - REDIS_URL=redis://redis:6379
      - TMDB_API_KEY=Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZDQ2MmI5MTYxZGM3NDIwMzI0NWVjMDcyOWRmZjM4NyIsIm5iZiI6MTc0NzA2MzAxOC41MzUsInN1YiI6IjY4MjIxMGVhMzJmNzNlMTJlNDczOTNjNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Xx1dOcNyzFsIMIB3h3hD006NVEoZMFXsF6d7GVlUsTA
      - TMDB_API_BASE_URL=https://api.themoviedb.org/3
      - TMDB_API_IMAGE_BASE_URL=https://image.tmdb.org/t/p/w500
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - app_network
    restart: unless-stopped

  quiz-service:
    image: quiz-service:latest
    container_name: quiz-service
    build:
      context: ./quiz-service
      dockerfile: Dockerfile
    environment:
      - SERVER_PORT=8087
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_JPA_SHOW_SQL=true
      - IMAGE_STORAGE_SERVICE_URL=http://image-storage-service:8086
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET=cinemarec-images
      - AWS_S3_ENDPOINT=http://localstack:4566
    ports:
      - "8087:8087"
    depends_on:
      - postgres
      - image-storage-service
      - localstack
    networks:
      - app_network
    restart: unless-stopped

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=tim
      - SPRING_DATASOURCE_PASSWORD=tim
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # Remove REDIS_URL to avoid conflict
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - app_network
    restart: unless-stopped
volumes:
  postgres_data:
  pgadmin:
  redis_data:
  localstack_data:

networks:
  app_network:
    driver: bridge